version: 2.1
jobs:
  build-arm64:
    working_directory: ~/app
    resource_class: arm.large
    docker:
      - image: cimg/base:current-22.04
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build ARM Docker image
          command: |
            chmod +x build.sh
            ./build.sh "$DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-edge"

      - run:
          name: Push ARM Docker image
          command: |
            echo "Logging into Docker Hub..."
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-edge

  build-amd64:
    working_directory: ~/app
    resource_class: large
    docker:
      - image: cimg/base:current-22.04
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build AMD64 Docker image
          command: |
            chmod +x build.sh
            ./build.sh "$DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-edge"

      - run:
          name: Push AMD64 Docker image
          command: |
            echo "Logging into Docker Hub..."
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-edge

  create-manifest:
    docker:
      - image: cimg/base:current-22.04
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create and Push Multi-Arch Manifest
          command: |
            echo "Logging into Docker Hub..."
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

            echo "Creating multi-arch manifest for edge..."
            docker manifest create $DOCKERHUB_USERNAME/$DOCKER_IMAGE:edge \
              $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-edge \
              $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-edge
            docker manifest annotate $DOCKERHUB_USERNAME/$DOCKER_IMAGE:edge $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-edge --arch amd64
            docker manifest annotate $DOCKERHUB_USERNAME/$DOCKER_IMAGE:edge $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-edge --arch arm64
            docker manifest push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:edge

            if [ "$CIRCLE_TAG" ]; then
              echo "Tagging version-specific images..."
              docker tag $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-edge $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-$CIRCLE_TAG
              docker tag $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-edge $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-$CIRCLE_TAG

              docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-$CIRCLE_TAG
              docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-$CIRCLE_TAG
              
              echo "Tagging as 'latest'..."
              docker manifest create $DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest \
                $DOCKERHUB_USERNAME/$DOCKER_IMAGE:amd64-$CIRCLE_TAG \
                $DOCKERHUB_USERNAME/$DOCKER_IMAGE:arm64-$CIRCLE_TAG
              docker manifest push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest
            fi

workflows:
  version: 2
  deploy:
    jobs:
      - build-arm64
      - build-amd64
      - create-manifest:
          requires:
            - build-arm64
            - build-amd64
